// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pb/svc/firebase/firebase.proto

package firebase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FirebaseClient is the client API for Firebase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirebaseClient interface {
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error)
	CreateCustomToken(ctx context.Context, in *CreateCustomTokenReq, opts ...grpc.CallOption) (*CreateCustomTokenRes, error)
	VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenRes, error)
}

type firebaseClient struct {
	cc grpc.ClientConnInterface
}

func NewFirebaseClient(cc grpc.ClientConnInterface) FirebaseClient {
	return &firebaseClient{cc}
}

func (c *firebaseClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error) {
	out := new(GetUserRes)
	err := c.cc.Invoke(ctx, "/pb.svc.firebase.Firebase/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firebaseClient) CreateCustomToken(ctx context.Context, in *CreateCustomTokenReq, opts ...grpc.CallOption) (*CreateCustomTokenRes, error) {
	out := new(CreateCustomTokenRes)
	err := c.cc.Invoke(ctx, "/pb.svc.firebase.Firebase/CreateCustomToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firebaseClient) VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenRes, error) {
	out := new(VerifyTokenRes)
	err := c.cc.Invoke(ctx, "/pb.svc.firebase.Firebase/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirebaseServer is the server API for Firebase service.
// All implementations must embed UnimplementedFirebaseServer
// for forward compatibility
type FirebaseServer interface {
	GetUser(context.Context, *GetUserReq) (*GetUserRes, error)
	CreateCustomToken(context.Context, *CreateCustomTokenReq) (*CreateCustomTokenRes, error)
	VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenRes, error)
	mustEmbedUnimplementedFirebaseServer()
}

// UnimplementedFirebaseServer must be embedded to have forward compatible implementations.
type UnimplementedFirebaseServer struct {
}

func (UnimplementedFirebaseServer) GetUser(context.Context, *GetUserReq) (*GetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFirebaseServer) CreateCustomToken(context.Context, *CreateCustomTokenReq) (*CreateCustomTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomToken not implemented")
}
func (UnimplementedFirebaseServer) VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedFirebaseServer) mustEmbedUnimplementedFirebaseServer() {}

// UnsafeFirebaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirebaseServer will
// result in compilation errors.
type UnsafeFirebaseServer interface {
	mustEmbedUnimplementedFirebaseServer()
}

func RegisterFirebaseServer(s grpc.ServiceRegistrar, srv FirebaseServer) {
	s.RegisterService(&Firebase_ServiceDesc, srv)
}

func _Firebase_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.firebase.Firebase/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firebase_CreateCustomToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseServer).CreateCustomToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.firebase.Firebase/CreateCustomToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseServer).CreateCustomToken(ctx, req.(*CreateCustomTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firebase_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.firebase.Firebase/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseServer).VerifyToken(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Firebase_ServiceDesc is the grpc.ServiceDesc for Firebase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Firebase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.svc.firebase.Firebase",
	HandlerType: (*FirebaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Firebase_GetUser_Handler,
		},
		{
			MethodName: "CreateCustomToken",
			Handler:    _Firebase_CreateCustomToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _Firebase_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/firebase/firebase.proto",
}
