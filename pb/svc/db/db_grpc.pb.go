// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: pb/svc/db/db.proto

package db

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DB_AddNewUser_FullMethodName              = "/pb.svc.db.DB/AddNewUser"
	DB_AddDevice_FullMethodName               = "/pb.svc.db.DB/AddDevice"
	DB_RemoveDevice_FullMethodName            = "/pb.svc.db.DB/RemoveDevice"
	DB_GetDevices_FullMethodName              = "/pb.svc.db.DB/GetDevices"
	DB_GetBattery_FullMethodName              = "/pb.svc.db.DB/GetBattery"
	DB_GetAllBattery_FullMethodName           = "/pb.svc.db.DB/GetAllBattery"
	DB_GetUsersAllBatteryLevel_FullMethodName = "/pb.svc.db.DB/GetUsersAllBatteryLevel"
	DB_UpdateBatteryLevel_FullMethodName      = "/pb.svc.db.DB/UpdateBatteryLevel"
)

// DBClient is the client API for DB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBClient interface {
	AddNewUser(ctx context.Context, in *AddNewUserReq, opts ...grpc.CallOption) (*AddNewUserRes, error)
	AddDevice(ctx context.Context, in *AddDeviceReq, opts ...grpc.CallOption) (*AddDeviceRes, error)
	RemoveDevice(ctx context.Context, in *RemoveDeviceReq, opts ...grpc.CallOption) (*RemoveDeviceRes, error)
	GetDevices(ctx context.Context, in *GetDevicesReq, opts ...grpc.CallOption) (*GetDevicesRes, error)
	GetBattery(ctx context.Context, in *GetBatteryReq, opts ...grpc.CallOption) (*GetBatteryRes, error)
	GetAllBattery(ctx context.Context, in *GetAllBatteryReq, opts ...grpc.CallOption) (*GetAllBatteryRes, error)
	GetUsersAllBatteryLevel(ctx context.Context, in *GetUsersAllBatteryLevelReq, opts ...grpc.CallOption) (*GetUsersAllBatteryLevelRes, error)
	// rpc GetDeviceDetails(GetDeviceDetailsReq) returns (GetDeviceDetailsRes);
	UpdateBatteryLevel(ctx context.Context, in *UpdateBatteryLevelReq, opts ...grpc.CallOption) (*UpdateBatteryLevelRes, error)
}

type dBClient struct {
	cc grpc.ClientConnInterface
}

func NewDBClient(cc grpc.ClientConnInterface) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) AddNewUser(ctx context.Context, in *AddNewUserReq, opts ...grpc.CallOption) (*AddNewUserRes, error) {
	out := new(AddNewUserRes)
	err := c.cc.Invoke(ctx, DB_AddNewUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) AddDevice(ctx context.Context, in *AddDeviceReq, opts ...grpc.CallOption) (*AddDeviceRes, error) {
	out := new(AddDeviceRes)
	err := c.cc.Invoke(ctx, DB_AddDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) RemoveDevice(ctx context.Context, in *RemoveDeviceReq, opts ...grpc.CallOption) (*RemoveDeviceRes, error) {
	out := new(RemoveDeviceRes)
	err := c.cc.Invoke(ctx, DB_RemoveDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) GetDevices(ctx context.Context, in *GetDevicesReq, opts ...grpc.CallOption) (*GetDevicesRes, error) {
	out := new(GetDevicesRes)
	err := c.cc.Invoke(ctx, DB_GetDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) GetBattery(ctx context.Context, in *GetBatteryReq, opts ...grpc.CallOption) (*GetBatteryRes, error) {
	out := new(GetBatteryRes)
	err := c.cc.Invoke(ctx, DB_GetBattery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) GetAllBattery(ctx context.Context, in *GetAllBatteryReq, opts ...grpc.CallOption) (*GetAllBatteryRes, error) {
	out := new(GetAllBatteryRes)
	err := c.cc.Invoke(ctx, DB_GetAllBattery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) GetUsersAllBatteryLevel(ctx context.Context, in *GetUsersAllBatteryLevelReq, opts ...grpc.CallOption) (*GetUsersAllBatteryLevelRes, error) {
	out := new(GetUsersAllBatteryLevelRes)
	err := c.cc.Invoke(ctx, DB_GetUsersAllBatteryLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) UpdateBatteryLevel(ctx context.Context, in *UpdateBatteryLevelReq, opts ...grpc.CallOption) (*UpdateBatteryLevelRes, error) {
	out := new(UpdateBatteryLevelRes)
	err := c.cc.Invoke(ctx, DB_UpdateBatteryLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServer is the server API for DB service.
// All implementations must embed UnimplementedDBServer
// for forward compatibility
type DBServer interface {
	AddNewUser(context.Context, *AddNewUserReq) (*AddNewUserRes, error)
	AddDevice(context.Context, *AddDeviceReq) (*AddDeviceRes, error)
	RemoveDevice(context.Context, *RemoveDeviceReq) (*RemoveDeviceRes, error)
	GetDevices(context.Context, *GetDevicesReq) (*GetDevicesRes, error)
	GetBattery(context.Context, *GetBatteryReq) (*GetBatteryRes, error)
	GetAllBattery(context.Context, *GetAllBatteryReq) (*GetAllBatteryRes, error)
	GetUsersAllBatteryLevel(context.Context, *GetUsersAllBatteryLevelReq) (*GetUsersAllBatteryLevelRes, error)
	// rpc GetDeviceDetails(GetDeviceDetailsReq) returns (GetDeviceDetailsRes);
	UpdateBatteryLevel(context.Context, *UpdateBatteryLevelReq) (*UpdateBatteryLevelRes, error)
	mustEmbedUnimplementedDBServer()
}

// UnimplementedDBServer must be embedded to have forward compatible implementations.
type UnimplementedDBServer struct {
}

func (UnimplementedDBServer) AddNewUser(context.Context, *AddNewUserReq) (*AddNewUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewUser not implemented")
}
func (UnimplementedDBServer) AddDevice(context.Context, *AddDeviceReq) (*AddDeviceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (UnimplementedDBServer) RemoveDevice(context.Context, *RemoveDeviceReq) (*RemoveDeviceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDevice not implemented")
}
func (UnimplementedDBServer) GetDevices(context.Context, *GetDevicesReq) (*GetDevicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedDBServer) GetBattery(context.Context, *GetBatteryReq) (*GetBatteryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBattery not implemented")
}
func (UnimplementedDBServer) GetAllBattery(context.Context, *GetAllBatteryReq) (*GetAllBatteryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBattery not implemented")
}
func (UnimplementedDBServer) GetUsersAllBatteryLevel(context.Context, *GetUsersAllBatteryLevelReq) (*GetUsersAllBatteryLevelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersAllBatteryLevel not implemented")
}
func (UnimplementedDBServer) UpdateBatteryLevel(context.Context, *UpdateBatteryLevelReq) (*UpdateBatteryLevelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBatteryLevel not implemented")
}
func (UnimplementedDBServer) mustEmbedUnimplementedDBServer() {}

// UnsafeDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBServer will
// result in compilation errors.
type UnsafeDBServer interface {
	mustEmbedUnimplementedDBServer()
}

func RegisterDBServer(s grpc.ServiceRegistrar, srv DBServer) {
	s.RegisterService(&DB_ServiceDesc, srv)
}

func _DB_AddNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).AddNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_AddNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).AddNewUser(ctx, req.(*AddNewUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_AddDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).AddDevice(ctx, req.(*AddDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_RemoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).RemoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_RemoveDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).RemoveDevice(ctx, req.(*RemoveDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).GetDevices(ctx, req.(*GetDevicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_GetBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).GetBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_GetBattery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).GetBattery(ctx, req.(*GetBatteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_GetAllBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBatteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).GetAllBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_GetAllBattery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).GetAllBattery(ctx, req.(*GetAllBatteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_GetUsersAllBatteryLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersAllBatteryLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).GetUsersAllBatteryLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_GetUsersAllBatteryLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).GetUsersAllBatteryLevel(ctx, req.(*GetUsersAllBatteryLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_UpdateBatteryLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBatteryLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).UpdateBatteryLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DB_UpdateBatteryLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).UpdateBatteryLevel(ctx, req.(*UpdateBatteryLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DB_ServiceDesc is the grpc.ServiceDesc for DB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.svc.db.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewUser",
			Handler:    _DB_AddNewUser_Handler,
		},
		{
			MethodName: "AddDevice",
			Handler:    _DB_AddDevice_Handler,
		},
		{
			MethodName: "RemoveDevice",
			Handler:    _DB_RemoveDevice_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _DB_GetDevices_Handler,
		},
		{
			MethodName: "GetBattery",
			Handler:    _DB_GetBattery_Handler,
		},
		{
			MethodName: "GetAllBattery",
			Handler:    _DB_GetAllBattery_Handler,
		},
		{
			MethodName: "GetUsersAllBatteryLevel",
			Handler:    _DB_GetUsersAllBatteryLevel_Handler,
		},
		{
			MethodName: "UpdateBatteryLevel",
			Handler:    _DB_UpdateBatteryLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/db/db.proto",
}
