// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: pb/svc/consumer/consumer.proto

package consumer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Consumer_CreateNewMsg_FullMethodName   = "/pb.svc.consumer.Consumer/CreateNewMsg"
	Consumer_CreateNewTopic_FullMethodName = "/pb.svc.consumer.Consumer/CreateNewTopic"
	Consumer_GetUserDevices_FullMethodName = "/pb.svc.consumer.Consumer/GetUserDevices"
)

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerClient interface {
	CreateNewMsg(ctx context.Context, in *CreateNewMsgReq, opts ...grpc.CallOption) (*CreateNewMsgRes, error)
	CreateNewTopic(ctx context.Context, in *CreateNewTopicReq, opts ...grpc.CallOption) (*CreateNewTopicRes, error)
	GetUserDevices(ctx context.Context, in *GetUserDevicesReq, opts ...grpc.CallOption) (*GetUserDevicesRes, error)
}

type consumerClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerClient(cc grpc.ClientConnInterface) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) CreateNewMsg(ctx context.Context, in *CreateNewMsgReq, opts ...grpc.CallOption) (*CreateNewMsgRes, error) {
	out := new(CreateNewMsgRes)
	err := c.cc.Invoke(ctx, Consumer_CreateNewMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) CreateNewTopic(ctx context.Context, in *CreateNewTopicReq, opts ...grpc.CallOption) (*CreateNewTopicRes, error) {
	out := new(CreateNewTopicRes)
	err := c.cc.Invoke(ctx, Consumer_CreateNewTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) GetUserDevices(ctx context.Context, in *GetUserDevicesReq, opts ...grpc.CallOption) (*GetUserDevicesRes, error) {
	out := new(GetUserDevicesRes)
	err := c.cc.Invoke(ctx, Consumer_GetUserDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServer is the server API for Consumer service.
// All implementations must embed UnimplementedConsumerServer
// for forward compatibility
type ConsumerServer interface {
	CreateNewMsg(context.Context, *CreateNewMsgReq) (*CreateNewMsgRes, error)
	CreateNewTopic(context.Context, *CreateNewTopicReq) (*CreateNewTopicRes, error)
	GetUserDevices(context.Context, *GetUserDevicesReq) (*GetUserDevicesRes, error)
	mustEmbedUnimplementedConsumerServer()
}

// UnimplementedConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServer struct {
}

func (UnimplementedConsumerServer) CreateNewMsg(context.Context, *CreateNewMsgReq) (*CreateNewMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewMsg not implemented")
}
func (UnimplementedConsumerServer) CreateNewTopic(context.Context, *CreateNewTopicReq) (*CreateNewTopicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTopic not implemented")
}
func (UnimplementedConsumerServer) GetUserDevices(context.Context, *GetUserDevicesReq) (*GetUserDevicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDevices not implemented")
}
func (UnimplementedConsumerServer) mustEmbedUnimplementedConsumerServer() {}

// UnsafeConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServer will
// result in compilation errors.
type UnsafeConsumerServer interface {
	mustEmbedUnimplementedConsumerServer()
}

func RegisterConsumerServer(s grpc.ServiceRegistrar, srv ConsumerServer) {
	s.RegisterService(&Consumer_ServiceDesc, srv)
}

func _Consumer_CreateNewMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).CreateNewMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consumer_CreateNewMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).CreateNewMsg(ctx, req.(*CreateNewMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_CreateNewTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).CreateNewTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consumer_CreateNewTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).CreateNewTopic(ctx, req.(*CreateNewTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_GetUserDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDevicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).GetUserDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consumer_GetUserDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).GetUserDevices(ctx, req.(*GetUserDevicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Consumer_ServiceDesc is the grpc.ServiceDesc for Consumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.svc.consumer.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewMsg",
			Handler:    _Consumer_CreateNewMsg_Handler,
		},
		{
			MethodName: "CreateNewTopic",
			Handler:    _Consumer_CreateNewTopic_Handler,
		},
		{
			MethodName: "GetUserDevices",
			Handler:    _Consumer_GetUserDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/consumer/consumer.proto",
}
